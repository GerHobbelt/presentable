{
  "name": "amdclean",
  "version": "0.2.6",
  "description": "A build tool that converts AMD code to standard JavaScript",
  "main": "./src/amdclean",
  "repository": {
    "type": "git",
    "url": "https://github.com/gfranko/amdclean.git"
  },
  "keywords": [
    "amd",
    "requirejs",
    "modules",
    "convert"
  ],
  "author": {
    "name": "Greg Franko",
    "url": "http://gregfranko.com"
  },
  "scripts": {
    "test": "jasmine-node test/specs/ --matchall"
  },
  "dependencies": {
    "esprima": ">= 1.0 <1.2",
    "lodash": "~2.2.1",
    "estraverse": "~1.3.1",
    "escodegen": "~0.0.27"
  },
  "devDependencies": {
    "jasmine-node": "1.x"
  },
  "engine": {
    "node": ">= 0.8"
  },
  "license": "MIT",
  "readme": "#amdclean\n\nA build tool that converts AMD code to standard JavaScript.\n\n[![Build Status](https://travis-ci.org/gfranko/amdclean.png?branch=master)](https://travis-ci.org/gfranko/amdclean)\n\n`npm install amdclean`\n\n\n## Use Case\n\n**Single file** client-side JavaScript libraries or applications that use AMD, but do not use AMD plugins (e.g. text! plugin).\n\n\n## Why\n\nMany developers like to use the AMD API to write modular JavaScript, but do not want to include a full AMD loader (e.g. [require.js](https://github.com/jrburke/requirejs)), or AMD shim (e.g. [almond.js](https://github.com/jrburke/almond)) because of file size/source code readability.\n\nBy incorporating amdclean.js into the build process, there is no need for Require or Almond.\n\nSince AMDclean rewrites your source code into standard JavaScript, it is a great\nfit for JavaScript library authors who want a tiny download in one file after using the\n[RequireJS Optimizer](http://requirejs.org/docs/optimization.html).\n\nSo, you get great code cleanliness with AMD, reduced file sizes, improved code readability, and easy integration with other developers who may not use AMD.\n\n\n## Restrictions\n\n**Note:** Same restrictions as almond.js, plus a few more.\n\nIt is best used for libraries or apps that use AMD and:\n\n* optimize all the modules into one file -- no dynamic code loading.\n* do not use AMD loader plugins (e.g. text! plugin)\n* only have **one** require.config() call\n\n\n##What is Supported\n\n* `define()` and `require()` calls.\n\n## Download\n\nNode - `npm install amdclean`\n\nWeb - [Latest release](https://github.com/gfranko/amdclean/blob/master/src/amdclean.js)\n\n\n## Usage\n\nThere are a few different ways that amdclean can be used including:\n\n* With the RequireJS Optimizer (Grunt is also supported)\n\n* As a standalone node module\n\n* As a client-side library\n\n\n###RequireJS Optimizer\n\n* [Download the RequireJS optimizer](http://requirejs.org/docs/download.html#rjs).\n\n* `npm install amdclean`\n\n* Make sure that each of your AMD modules have a module ID `path` alias name\n\n```javascript\npaths: {\n\n\t'first': '../modules/firstModule',\n\n\t'second': '../modules/secondModule',\n\n\t'third': '../modules/thirdModule'\n\n}\n```\n\n* Update the `onBuildWrite` property in your RequireJS build configuration file.  Like this:\n\n```javascript\nonBuildWrite: function (moduleName, path, contents) {\n    return require('amdclean').clean(contents);\n}\n```\n\n* Run the optimizer using [Node](http://nodejs.org) (also [works in Java](https://github.com/jrburke/r.js/blob/master/README.md)).  More details can be found in the the [r.js](https://github.com/jrburke/r.js/) repo.\n\n* If you are using the RequireJS optimizer [Grunt task](https://github.com/gruntjs/grunt-contrib-requirejs), then it is very easy to integrate amdclean using the `onBuildWrite` config option. Here is an example Grunt file that includes the RequireJS optimizer plugin with amdclean support:\n\n```javascript\nmodule.exports = function(grunt) {\n  grunt.initConfig({\n    pkg: grunt.file.readJSON('package.json'),\n    requirejs: {\n      js: {\n        options: {\n          findNestedDependencies: true,\n          baseUrl: 'src/js/app/modules',\n          wrap: true,\n          preserveLicenseComments: false,\n          optimize: 'none',\n          mainConfigFile: 'src/js/app/config/config.js',\n          include: ['first'],\n          out: 'src/js/app/exampleLib.js',\n          onBuildWrite: function( name, path, contents ) {\n            return require('amdclean').clean(contents);\n          }\n        }\n      }\n    }\n  });\n  grunt.loadNpmTasks('grunt-contrib-requirejs');\n  grunt.registerTask('build', ['requirejs:js']);\n  grunt.registerTask('default', ['build']);\n};\n```\n\n###Node Module\n\n* `npm install amdclean`\n\n* Require the module\n\n```javascript\nvar cleanAMD = require('amdclean');\n```\n\n* Call the clean method\n\n```javascript\nvar code = 'define(\"exampleModule\", function() {});'\nvar cleanedCode = cleanAMD.clean(code);\n```\n\n\n###Client-side Library\n\n* Include all dependencies\n\n```html\n<script src=\"http://esprima.org/esprima.js\"></script>\n<script src=\"http://esprima.org/test/3rdparty/escodegen.browser.js\"></script>\n<script src=\"http://gregfranko.com/javascripts/estraverse.js\"></script>\n<script src=\"http://cdnjs.cloudflare.com/ajax/libs/lodash.js/2.2.1/lodash.js\"></script>\n<script src=\"http://gregfranko.com/javascripts/amdclean.js\"></script>\n```\n\n* Use the global `amdclean` object and `clean()` method\n\n```javascript\nvar cleanedCode = amdclean.clean('define(\"example\", [], function() { var a = true; });');\n```\n\n## Requirements\n\n* [Esprima](https://github.com/ariya/esprima) 1.0+\n\n* [Lodash](https://github.com/lodash/lodash) 2.2.1+\n\n* [Estraverse](https://github.com/Constellation/estraverse) 1.3.1+\n\n* [Escodegen](https://github.com/Constellation/escodegen) 0.0.27+\n\n## Optional Dependencies\n\n* [r.js](https://github.com/jrburke/r.js/) 2.1.0+\n\n\n## How it works\n\namdclean uses Esprima to generate an AST (Abstract Syntax Tree) from the provided source code, estraverse to traverse and update the AST, and escodegen to generate the new standard JavaScript code.  There are a few different techniques that amdclean uses to convert AMD to standard JavaScript code:\n\n\n###Define Calls\n\n_AMD_\n\n```javascript\ndefine('example', [], function() {\n\t\n});\n```\n\n_Standard_\n\n```javascript\nvar example = function () {\n\n}();\n```\n\n---\n\n_AMD_\n\n```javascript\ndefine('example', ['example1', 'example2'], function(one, two) {\n\t\n});\n```\n\n\n_Standard_\n\n```javascript\nvar example = function (one, two) {\n\n}(example1, example2);\n```\n\n---\n\n_AMD_\n\n```javascript\ndefine('third',{\n\texampleProp: 'This is an example'\n});\n```\n\n_Standard_\n\n```javascript\nvar third = {\n\texampleProp: 'This is an example'\n};\n```\n\n---\n\n###Require Calls\n\n**Note:** `require(['someModule'])` calls are removed from the built source code\n\n_AMD_\n\n```javascript\nrequire([], function() {\n\tvar example = true;\n});\n```\n\n_Standard_\n\n```javascript\n(function () {\n    var example = true;\n}());\n```\n\n---\n\n_AMD_\n\n```javascript\nrequire(['anotherModule'], function(anotherModule) {\n\tvar example = true;\n});\n```\n\n_Standard_\n\n```javascript\n(function (anotherModule) {\n    var example = true;\n}(anotherModule));\n```\n\n\n##Options\n\nThe amdclean `clean()` method accepts a string or an object.  Below is an example objects with all of the available configuration options:\n\n```javascript\namdclean.clean({\n\t// The source code you would like to be 'cleaned'\n\tcode: 'define(\"example\", [], function(one, two) {});',\n\t// All esprima API options are supported: http://esprima.org/doc/\n\tesprima: {},\n\t// All escodegen API options are supported: https://github.com/Constellation/escodegen/wiki/API\n\tescodegen: {}\n})\n```\n\n\n## Unit Tests\n\nAll unit tests are written using the [jasmine-node](https://github.com/mhevery/jasmine-node) library and can be found in the `test/specs/` folder.\n\n\n## FAQ\n\n__Why would I use amdclean instead of Almond.js?__\n\n - Although Almond is very small (~1k gzipped and minified), most JavaScript library authors do not want to have to include it in their library's source code.  If you are not using an AMD plugin, then amdclean provides the benefit of AMD without increasing your library's file size.\n\n __What if I don't want all define() and require() method calls to be removed?__\n\n - If you don't want one or more define() and require() methods to be removed by `amdclean`, then you must put a comment with only the words _amdclean_ on the same line or one line above the method in question.  For example, `amdclean` would not remove the `define()` method below:\n\n ```javascript\n// amdclean\ndefine('example', [], function() {});\n ```\n\n\n## License\n\nCopyright (c) 2013 Greg Franko Licensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/gfranko/amdclean/issues"
  },
  "_id": "amdclean@0.2.6",
  "_from": "amdclean@"
}
